geom_line() +
geom_vline(xintercept = jsonCar, colour="yellowgreen", linetype = 4) +
geom_vline(xintercept = jsonBicycle, colour="black", linetype = 2) +
#  geom_vline(xintercept = jsonTruck, colour="green", linetype = 3) +
geom_vline(xintercept = startTimeT1, colour="red", linetype = 3) +
geom_vline(xintercept = endTimeT2, colour="blue", linetype = 3) +
coord_cartesian(xlim = c(10659, 11395)) +
labs(title="Heisenbergstrasse 4/7/2018 WI-Fi Strengths:", subtitle = "t1(start)= red line  and  t2(end)= blue line; bicycle=black ", x = "Time", y = "Strength"))
boxplotResultsFunction (ResultTableT1T2WidthAmplitude$AmplitudeMaxValue, "AmplitudeMaxValue")
View(AmplitudeList)
summary(AmplitudeList)
library(ggplot2)        # plot
library(lubridate)      # easily work with dates and times
library(zoo)            # working with time series data
library(jsonlite)       # json
#___________________________________________________________________________________________________________________________
# main folder
setwd("/Users/Alf/Documents/GitHub/Bachelor/R/")
# load data
#_________________________(CSVdata, jsonCar, jsonBicycle, jsonTruck, videoTimeWhenArduinoSwitchOn, vehicleFilter)_________________________________________________________________
# bachelor <- wifiAnalysis("./4_July_Heisenbergstrasse.csv","./json/carTime4th7July.json", "./json/bicycleTime4th7July.json","./json/truckTime4th7July.json", 589.726292, 5)
#___________________________________________________________________________________________________________________________________________________
#test123 <- function(CSVdata, jsonCar, jsonBicycle, jsonTruck, videoTimeWhenArduinoSwitchOn, vehicleFilter){
#csvDataFromArduino <- read.table(file = CSVdata, sep = ",")
csvDataFromArduino <- read.table(file = "./csv/26_July_Steinfurterstrasse.csv", sep = ",")
#change head name of the first & second column
colnames(csvDataFromArduino) <- c("timeInMilliseconds", "signalStrength")
jsonCar <- fromJSON("./json/carTime26thJuly.json")
jsonBicycle <-fromJSON("./json/bicycleTime26thJuly.json")
jsonTruck <- fromJSON("./json/truckTime26thJuly.json")
jsonTwoVehicles <- fromJSON("./json/vehicleTime26thJuly.json")
# minus video time until adruino turns on; multiply 1000 to convert seconds to millisecond
jsonCar <- (jsonCar - 677.675543) * 1000
jsonBicycle <- (jsonBicycle - 677.675543) * 1000
jsonTruck <- (jsonTruck - 677.675543) * 1000
jsonTwoVehicles <-(jsonTwoVehicles- 677.675543) * 1000
# Remove elements larger than max of timeInMilliseconds:
jsonCar <- jsonCar[ jsonCar < max(csvDataFromArduino$timeInMilliseconds) ]
jsonBicycle <- jsonBicycle[ jsonBicycle < max(csvDataFromArduino$timeInMilliseconds) ]
jsonTruck <- jsonTruck[ jsonTruck < max(csvDataFromArduino$timeInMilliseconds) ]
jsonTwoVehicles <- jsonTwoVehicles[jsonTwoVehicles< max(csvDataFromArduino$timeInMilliseconds) ]
# Remove elements larger than max of jsonCar:
maxTimeInMilliseconds <- csvDataFromArduino$timeInMilliseconds[ csvDataFromArduino$timeInMilliseconds < max(jsonCar) ]
# Remove elements larger than max of maxTimeInMilliseconds:
csvDataFromArduino <- csvDataFromArduino[1:length(maxTimeInMilliseconds),]
# convert in minutes
#timeInMinutes <- format( as.POSIXct(Sys.Date())+csvDataFromArduino$timeInMilliseconds/1000, "%M:%S")
#___________________________________________________________________________________________________________________________
#new columns: time difference and value difference
csvDataFromArduino$td <- NA
csvDataFromArduino$valueDifference <- NA
# save the difference as pasitive value
for (i in 1 : (length(csvDataFromArduino$timeInMilliseconds))) {
csvDataFromArduino$valueDifference[i] <-  abs(csvDataFromArduino$signalStrength[i + 1] - csvDataFromArduino$signalStrength[i] )
}
#start values
i <- 1
j <- 1
k <- 1
#start boolean
aberrant <- FALSE
#two empty columns
startTimeT1 <-NA
endTimeT2 <- NA
timeT <- NA
t1 <-NA
t2 <- NA
while (i < length(csvDataFromArduino$timeInMilliseconds)-1) {
if(  ( (csvDataFromArduino$valueDifference[i]  > 2) && (!aberrant)) ){
startTimeT1[j] <- c(csvDataFromArduino$timeInMilliseconds[i])
csvDataFromArduino$td[i] <- c(csvDataFromArduino$timeInMilliseconds[i])
aberrant <- TRUE
t1[i] <- c(csvDataFromArduino$timeInMilliseconds[i])
timeT[i] <- paste0("= startTimeT", j  )
j <- j +1
}
else if((csvDataFromArduino$valueDifference[i]  <= 2 && aberrant && csvDataFromArduino$valueDifference[i+1] <= 2 && csvDataFromArduino$valueDifference[i+2] <= 2 ) ){
endTimeT2[k] <- c(csvDataFromArduino$timeInMilliseconds[i])
csvDataFromArduino$td[i] <- c(csvDataFromArduino$timeInMilliseconds[i])
aberrant <- FALSE
t2[i] <- c(csvDataFromArduino$timeInMilliseconds[i])
timeT[i] <- paste0("endTimeT", k, " =")
k <- k +1
}
else{
}
i <- i +1
t1[i] <- 0
t2[i] <- 0
timeT[i] <- NA
}
results <- endTimeT2 - startTimeT1
resultsT2MinusT1 <- t2 -t1
boxplot(results )#,ylim = c(0, 1000), yaxs = "i")
boxplot(results, horizontal = TRUE, axes = FALSE, staplewex = 1)
text(x=fivenum(results), labels =fivenum(results), y=1.25)
text(x = boxplot.stats(results)$stats, labels = boxplot.stats(results)$stats, y = 1.25)
title("Steinfurter Straße time results(t2-t1) in milliseconds")
#new data table amplitudecsvDataFromArduino
amplitudecsvDataFromArduino <- csvDataFromArduino
#length of amplitudecsvDataFromArduino uneven or even?
if (length(amplitudecsvDataFromArduino$signalStrength)%%2 != 0 ){
amplitudecsvDataFromArduinoLength = length(amplitudecsvDataFromArduino$signalStrength)-1
}else{
amplitudecsvDataFromArduinoLength = length(amplitudecsvDataFromArduino$signalStrength)
}
AmplitudeList <- amplitudecsvDataFromArduino$V3
listSignalStrength <- amplitudecsvDataFromArduino$signalStrength
#first measurement value - second measurement value
for (i in 1:(amplitudecsvDataFromArduinoLength)){
nextValue <-listSignalStrength[i+1]
AmplitudeList[i]<- c(if (listSignalStrength[i] == nextValue) {
0
}else{
(listSignalStrength[i]-listSignalStrength[i+1])
})
}
resultTable <- data.frame(t1, timeT, t2, resultsT2MinusT1, AmplitudeList, amplitudecsvDataFromArduino$timeInMilliseconds[-length(amplitudecsvDataFromArduino$timeInMilliseconds)] )
#change head name
colnames(resultTable) <- c("t1", "timeT", "t2", "resultsT2MinusT1", "AmplitudeList",  "timeInMilliseconds")
newResultTable <-NA
newResultTable <- data.frame(t1 = numeric(), timeT = factor(), t2 = numeric(), resultsT2MinusT1 = numeric(), AmplitudeList = numeric(), filteredAmplitudeListCar= numeric(), filteredAmplitudeListBicycle= numeric(),timeInMilliseconds= integer())
ResultTableT1T2WidthAmplitude <- data.frame(t1 = numeric(),  t2 = numeric(), resultsT2MinusT1 = numeric(), AmplitudeMaxValue= integer())
q <- 1
#results only from startTime until endTime
for (i in 2: (length(resultTable$timeInMilliseconds))) {
if(resultTable$t1[i] > 1){
newResultTable[q, ] <- resultTable[i, ]
q <- q +1
while (resultTable$t2[i] < 1) {
i <- i + 1
newResultTable[q, ] <- resultTable[i, ]
q <- q +1
}
}else{
}
}
tempList <- c()
temp <- 0
q <- 1
j <- 1
maxValue<- 0
for (i in 1: (length(newResultTable$timeInMilliseconds))) {
if(newResultTable$t1[i] > 1){
ResultTableT1T2WidthAmplitude[q, 1] <- newResultTable[i ,1]
tempList[j] <- newResultTable[i, 5]
while (newResultTable$t2[i] < 1) {
i <- i + 1
j <- j + 1
tempList[j] <-  newResultTable[i, 5]
if(newResultTable$t2[i] > 1){
ResultTableT1T2WidthAmplitude[q, 2] <- newResultTable[i,3]
for (x in 1 : length(tempList)) {
if(tempList[x] >= 0 ){
temp <- temp + tempList[x]
if (x == length(tempList) && maxValue < temp){
maxValue <- temp
temp <- 0
}
}else if(maxValue < temp || tempList[x] < 0  ){
if (maxValue < temp){
maxValue <- temp
}
temp <- 0
}
}
ResultTableT1T2WidthAmplitude$AmplitudeMaxValue[q] <-  maxValue
# ResultTableT1T2WidthAmplitude$AmplitudeListAll[q] <-  toString(tempList)
ResultTableT1T2WidthAmplitude$resultsT2MinusT1[q] <- ResultTableT1T2WidthAmplitude[q, 2] - ResultTableT1T2WidthAmplitude[q, 1]
}
}
temp <- 0
tempList <- c()
maxValue <- 0
j <- 1
q <- q +1
}else{
}
}
summary(ResultTableT1T2WidthAmplitude$resultsT2MinusT1)
summary(ResultTableT1T2WidthAmplitude$AmplitudeMaxValue)
boxplotResultsFunction (ResultTableT1T2WidthAmplitude$AmplitudeMaxValue, "AmplitudeMaxValue")
boxplotResultsFunction(ResultTableT1T2WidthAmplitude$resultsT2MinusT1, "Width resultsT2MinusT1")
boxplotResultsFunction<-function(boxplotResults, headName ){
print (boxplot(boxplotResults, horizontal = TRUE, axes = FALSE, staplewex = 1))
print(text(x=fivenum(boxplotResults), labels =fivenum(boxplotResults), y=1.25))
print(text(x = boxplot.stats(boxplotResults)$stats, labels = boxplot.stats(boxplotResults)$stats, y = 1.25))
print (title(paste("Steinfurter Straße", headName )))
}
boxplotResultsFunction (ResultTableT1T2WidthAmplitude$AmplitudeMaxValue, "AmplitudeMaxValue")
sum(ResultTableT1T2WidthAmplitude$AmplitudeMaxValue <= 5)
sum(ResultTableT1T2WidthAmplitude$AmplitudeMaxValue >= 5)
sum(ResultTableT1T2WidthAmplitude$AmplitudeMaxValue > 5)
sum(ResultTableT1T2WidthAmplitude$AmplitudeMaxValue > 5)
sum(ResultTableT1T2WidthAmplitude$AmplitudeMaxValue > 5) - sum(ResultTableT1T2WidthAmplitude$AmplitudeMaxValue > 25)
sum(ResultTableT1T2WidthAmplitude$AmplitudeMaxValue == 5)
sum(ResultTableT1T2WidthAmplitude$AmplitudeMaxValue > 25)
sum(ResultTableT1T2WidthAmplitude$AmplitudeMaxValue > 24)
sum(ResultTableT1T2WidthAmplitude$AmplitudeMaxValue > 5) - sum(ResultTableT1T2WidthAmplitude$AmplitudeMaxValue > 14)
sum(ResultTableT1T2WidthAmplitude$AmplitudeMaxValue > 5) - sum(ResultTableT1T2WidthAmplitude$AmplitudeMaxValue >= 14)
sum(ResultTableT1T2WidthAmplitude$AmplitudeMaxValue > 5) - sum(ResultTableT1T2WidthAmplitude$AmplitudeMaxValue >= 14)
sum(ResultTableT1T2WidthAmplitude$AmplitudeMaxValue > 5) - sum(ResultTableT1T2WidthAmplitude$AmplitudeMaxValue > 14)
summary(ResultTableT1T2WidthAmplitude$AmplitudeMaxValue)
resultTableAmplitude <- ResultTableT1T2WidthAmplitude[ , 1:2 ]
resultTableAmplitude$AmplitudeMaxValue <- ResultTableT1T2WidthAmplitude[ , 4 ]
resultTableAmplitude$vehicle <-NA
for (i in 1:length(resultTableAmplitude$AmplitudeMaxValue)) {
if  (resultTableAmplitude$AmplitudeMaxValue[i] > 5 && resultTableAmplitude$AmplitudeMaxValue[i] < 25 ){
resultTableAmplitude$vehicle[i] <- "car"
}
if (ResultTableT1T2WidthAmplitude$AmplitudeMaxValue[i] == 5){
resultTableAmplitude$vehicle[i] <- "bicycle"
}
if (ResultTableT1T2WidthAmplitude$AmplitudeMaxValue[i] == 25){
resultTableAmplitude$vehicle[i] <- "truck"
}
}
resultTableAmplitude <- na.omit(resultTableAmplitude)
sum(ResultTableT1T2WidthAmplitude$AmplitudeMaxValue > 5) - sum(ResultTableT1T2WidthAmplitude$AmplitudeMaxValue > 25)
sum(ResultTableT1T2WidthAmplitude$AmplitudeMaxValue == 5)
sum(ResultTableT1T2WidthAmplitude$AmplitudeMaxValue > 25)
sum(ResultTableT1T2WidthAmplitude$AmplitudeMaxValue > 24)
counterCar <- 0
for (i in 1 : length(resultTableAmplitude$t1)) {
for (x in 1 : length(jsonCar)) {
if(resultTableAmplitude$t1[i] <= jsonCar[x] && resultTableAmplitude$t2[i] >= jsonCar[x] && resultTableAmplitude$vehicle[i] == "car" ){
counterCar <- counterCar + 1
}else{
}
}
}
print(paste("cars:", counterCar))
counterBicycle <- 0
for (i in 1 : (length(resultTableAmplitude$t1))) {
for (x in 1 : (length(jsonBicycle))) {
if(resultTableAmplitude$t1[i] <= jsonBicycle[x] && resultTableAmplitude$t2[i] >= jsonBicycle[x] && resultTableAmplitude$vehicle[i] == "bicycle" ){
counterBicycle <- counterBicycle + 1
}else{
}
}
}
print(paste("bicycles:", counterBicycle))
counterTruck <- 0
for (i in 1 : (length(resultTableAmplitude$t1))) {
for (x in 1 : (length(jsonTruck))) {
if(resultTableAmplitude$t1[i] <= jsonTruck[x] && resultTableAmplitude$t2[i] >= jsonTruck[x] && resultTableAmplitude$vehicle[i] == "truck" ){
counterTruck <- counterTruck + 1
}else{
}
}
}
print(paste("trucks:", counterTruck))
V = 1000
P = 855
A = 518
#precision <- A / P
print(precision <- A / P )
#Recall
print(recall <- A / V )
#F
print(f <- 2 * ((precision * recall) / (precision + recall) ))
V = 66
P = 67
A = 1
#precision <- A / P
print(precision <- A / P )
#Recall
print(recall <- A / V )
#F
print(f <- 2 * ((precision * recall) / (precision + recall) ))
V = 45
P = 1
A = 0
#precision <- A / P
print(precision <- A / P )
#Recall
print(recall <- A / V )
#F
print(f <- 2 * ((precision * recall) / (precision + recall) ))
library(ggplot2)        # plot
library(lubridate)      # easily work with dates and times
library(zoo)            # working with time series data
library(jsonlite)       # json
library(scales)
library(lubridate)
#___________________________________________________________________________________________________________________________
# main folder
setwd("/Users/Alf/Documents/GitHub/Bachelor/R/")
# load data
#_________________________(CSVdata, jsonCar, jsonBicycle, jsonTruck, videoTimeWhenArduinoSwitchOn, vehicleFilter)_________________________________________________________________
# bachelor <- wifiAnalysis("./4_July_Heisenbergstrasse.csv","./json/carTime4th7July.json", "./json/bicycleTime4th7July.json","./json/truckTime4th7July.json", 589.726292, 5)
#___________________________________________________________________________________________________________________________________________________
#test123 <- function(CSVdata, jsonCar, jsonBicycle, jsonTruck, videoTimeWhenArduinoSwitchOn, vehicleFilter){
#csvDataFromArduino <- read.table(file = CSVdata, sep = ",")
csvDataFromArduino <- read.table(file = "./csv/4_July_Heisenbergstrasse.csv", sep = ",")
#change head name of the first & second column
colnames(csvDataFromArduino) <- c("timeInMilliseconds", "signalStrength")
jsonCar <- fromJSON("./json/carTime4thJuly.json")
#jsonCar <- fromJSON("./json/carTime4thJuly.json")
jsonBicycle <-fromJSON("./json/bicycleTime4thJuly.json")
jsonTruck <- fromJSON("./json/truckTime4thJuly.json")
# minus video time until adruino turns on; multiply 1000 to convert seconds to millisecond
jsonCar <- (jsonCar - 589.726292) * 1000
jsonBicycle <- (jsonBicycle - 589.726292) * 1000
jsonTruck <- (jsonTruck - 589.726292) * 1000
# Remove elements larger than max of timeInMilliseconds:
jsonCar <- jsonCar[ jsonCar < max(csvDataFromArduino$timeInMilliseconds) ]
jsonBicycle <- jsonBicycle[ jsonBicycle < max(csvDataFromArduino$timeInMilliseconds) ]
jsonTruck <- jsonTruck[ jsonTruck < max(csvDataFromArduino$timeInMilliseconds) ]
# Remove elements larger than max of jsonCar:
maxTimeInMilliseconds <- csvDataFromArduino$timeInMilliseconds[ csvDataFromArduino$timeInMilliseconds < max(jsonCar) ]
# Remove elements larger than max of maxTimeInMilliseconds:
csvDataFromArduino <- csvDataFromArduino[1:length(maxTimeInMilliseconds),]
# convert in minutes !!PROBLEM: x axis can't handle it
#csvDataFromArduino$timeInMinutes <- format( as.POSIXct(Sys.Date())+csvDataFromArduino$timeInMilliseconds/1000, "%H:%M:%S")
# convert milliseconds in date
# csvDataFromArduino$timeInMinutes <- as_datetime(csvDataFromArduino$timeInMilliseconds/1000)
#change year, month and day
# year(csvDataFromArduino$timeInMinutes) <- 2018
# month(csvDataFromArduino$timeInMinutes) <- 07
# day(csvDataFromArduino$timeInMinutes) <- 04
#___________________________________________________________________________________________________________________________
#new columns: time difference and value difference
csvDataFromArduino$td <- NA
csvDataFromArduino$valueDifference <- NA
# save the difference as pasitive value
for (i in 1 : (length(csvDataFromArduino$timeInMilliseconds))) {
csvDataFromArduino$valueDifference[i] <-  abs(csvDataFromArduino$signalStrength[i + 1] - csvDataFromArduino$signalStrength[i] )
}
#start values
i <- 1
j <- 1
k <- 1
#start boolean
aberrant <- FALSE
#two empty columns
startTimeT1 <-NA
endTimeT2 <- NA
timeT <- NA
t1 <-NA
t2 <- NA
while (i < length(csvDataFromArduino$timeInMilliseconds)-1) {
if(  ( (csvDataFromArduino$valueDifference[i]  > 2) && (!aberrant)) ){
startTimeT1[j] <- c(csvDataFromArduino$timeInMilliseconds[i])
csvDataFromArduino$td[i] <- c(csvDataFromArduino$timeInMilliseconds[i])
aberrant <- TRUE
t1[i] <- c(csvDataFromArduino$timeInMilliseconds[i])
timeT[i] <- paste0("= startTimeT", j  )
j <- j +1
}
else if((csvDataFromArduino$valueDifference[i]  <= 2 && aberrant && csvDataFromArduino$valueDifference[i+1] <= 2 && csvDataFromArduino$valueDifference[i+2] <= 2 ) ){
endTimeT2[k] <- c(csvDataFromArduino$timeInMilliseconds[i])
csvDataFromArduino$td[i] <- c(csvDataFromArduino$timeInMilliseconds[i])
aberrant <- FALSE
t2[i] <- c(csvDataFromArduino$timeInMilliseconds[i])
timeT[i] <- paste0("endTimeT", k, " =")
k <- k +1
}
else{
}
i <- i +1
t1[i] <- 0
t2[i] <- 0
timeT[i] <- NA
}
results <- endTimeT2 - startTimeT1
resultsT2MinusT1 <- t2 -t1
boxplot(results,ylim = c(200, 1000), yaxs = "i")
boxplot(results, horizontal = TRUE, axes = FALSE, staplewex = 1)
text(x=fivenum(results), labels =fivenum(results), y=1.25)
text(x = boxplot.stats(results)$stats, labels = boxplot.stats(results)$stats, y = 1.25)
title("Heisenbergstrasse time results(t2-t1) in milliseconds")
#plot Car
print(ggplot(csvDataFromArduino, aes(x=timeInMilliseconds, y=signalStrength)) +
geom_line() +
geom_vline(xintercept = jsonCar, colour="yellowgreen", linetype = 4) +
geom_vline(xintercept = jsonBicycle, colour="black", linetype = 2) +
#  geom_vline(xintercept = jsonTruck, colour="green", linetype = 3) +
geom_vline(xintercept = startTimeT1, colour="red", linetype = 3) +
geom_vline(xintercept = endTimeT2, colour="blue", linetype = 3) +
coord_cartesian(xlim = c(182371, 183734)) +
labs(title="Heisenbergstrasse 4/7/2018 WI-Fi Strengths:", subtitle = "t1(start)= red line  and  t2(end)= blue line; bicycle=black ", x = "Time", y = "Strength"))
print(ggplot(csvDataFromArduino, aes(x=timeInMilliseconds, y=signalStrength)) +
geom_line() +
geom_vline(xintercept = jsonCar, colour="yellowgreen", linetype = 4) +
geom_vline(xintercept = jsonBicycle, colour="black", linetype = 2) +
#  geom_vline(xintercept = jsonTruck, colour="green", linetype = 3) +
geom_vline(xintercept = startTimeT1, colour="red", linetype = 3) +
geom_vline(xintercept = endTimeT2, colour="blue", linetype = 3) +
coord_cartesian(xlim = c(182371, 183734)) +
labs(title="Heisenbergstrasse 4/7/2018 WI-Fi Strengths:", subtitle = "horizontal lines: t1(start)= red line; bicycle=black line; t2(end)= blue line; ", x = "Time in milliseconds", y = "Strength in dB"))
print(ggplot(csvDataFromArduino, aes(x=timeInMilliseconds, y=signalStrength)) +
geom_line() +
geom_vline(xintercept = jsonCar, colour="yellowgreen", linetype = 4) +
geom_vline(xintercept = jsonBicycle, colour="black", linetype = 2) +
#  geom_vline(xintercept = jsonTruck, colour="green", linetype = 3) +
geom_vline(xintercept = startTimeT1, colour="red", linetype = 3) +
geom_vline(xintercept = endTimeT2, colour="blue", linetype = 3) +
coord_cartesian(xlim = c(182371, 183734)) +
labs(title="Heisenbergstrasse 4/7/2018 peak width:", subtitle = "horizontal lines: t1(start)= red line; bicycle=black line; t2(end)= blue line; ", x = "Time in milliseconds", y = "Strength in dB"))
#new data table amplitudecsvDataFromArduino
amplitudecsvDataFromArduino <- csvDataFromArduino
#length of amplitudecsvDataFromArduino uneven or even?
if (length(amplitudecsvDataFromArduino$signalStrength)%%2 != 0 ){
amplitudecsvDataFromArduinoLength = length(amplitudecsvDataFromArduino$signalStrength)-1
}else{
amplitudecsvDataFromArduinoLength = length(amplitudecsvDataFromArduino$signalStrength)
}
AmplitudeList <- amplitudecsvDataFromArduino$V3
listSignalStrength <- amplitudecsvDataFromArduino$signalStrength
#first measurement - second measurement
for (i in 1:(amplitudecsvDataFromArduinoLength)){
nextValue <-listSignalStrength[i+1]
AmplitudeList[i]<- c(if (listSignalStrength[i] == nextValue) {
0 #AmplitudeList[i-1]
}else{
(listSignalStrength[i]-listSignalStrength[i+1])
#/2 it is not necessary
#https://www.inhaltsangabe.info/s-mathematik/die-amplitude-berechnen-bestimmen-definition-formel
#(listSignalStrength[i]-listSignalStrength[i+1]) / 2
})
}
resultTable <- data.frame(t1, timeT, t2, resultsT2MinusT1, AmplitudeList,  amplitudecsvDataFromArduino$timeInMilliseconds[-length(amplitudecsvDataFromArduino$timeInMilliseconds)] )
#change head name
colnames(resultTable) <- c("t1", "timeT", "t2", "resultsT2MinusT1", "AmplitudeList", "timeInMilliseconds")
newResultTable <-NA
newResultTable <- data.frame(t1 = numeric(), timeT = factor(), t2 = numeric(), resultsT2MinusT1 = numeric(), AmplitudeList = numeric(), filteredAmplitudeListCar= numeric(), filteredAmplitudeListBicycle= numeric(),timeInMilliseconds= integer())
ResultTableT1T2WidthAmplitude <- data.frame(t1 = numeric(),  t2 = numeric(), resultsT2MinusT1 = numeric(), AmplitudeMaxValue= integer())
q <- 1
#results only from startTime until endTime
for (i in 2: (length(resultTable$timeInMilliseconds))) {
if(resultTable$t1[i] > 1){
newResultTable[q, ] <- resultTable[i, ]
q <- q +1
while (resultTable$t2[i] < 1) {
i <- i + 1
newResultTable[q, ] <- resultTable[i, ]
q <- q +1
}
}else{
}
}
tempList <- c()
temp <- 0
q <- 1
j <- 1
maxValue<- 0
for (i in 1: (length(newResultTable$timeInMilliseconds))) {
if(newResultTable$t1[i] > 1){
ResultTableT1T2WidthAmplitude[q, 1] <- newResultTable[i ,1]
tempList[j] <- newResultTable[i, 5]
while (newResultTable$t2[i] < 1) {
i <- i + 1
j <- j + 1
tempList[j] <-  newResultTable[i, 5]
if(newResultTable$t2[i] > 1){
ResultTableT1T2WidthAmplitude[q, 2] <- newResultTable[i,3]
for (x in 1 : length(tempList)) {
if(tempList[x] >= 0 ){
temp <- temp + tempList[x]
if (x == length(tempList) && maxValue < temp){
maxValue <- temp
temp <- 0
}
}else if(maxValue < temp || tempList[x] < 0  ){
if (maxValue < temp){
maxValue <- temp
}
temp <- 0
}
}
ResultTableT1T2WidthAmplitude$AmplitudeMaxValue[q] <-  maxValue
# ResultTableT1T2WidthAmplitude$AmplitudeListAll[q] <-  toString(tempList)
ResultTableT1T2WidthAmplitude$resultsT2MinusT1[q] <- ResultTableT1T2WidthAmplitude[q, 2] - ResultTableT1T2WidthAmplitude[q, 1]
}
}
temp <- 0
tempList <- c()
maxValue <- 0
j <- 1
q <- q +1
}else{
}
}
boxplotResultsFunction<-function(boxplotResults, headName ){
print (boxplot(boxplotResults, horizontal = TRUE, axes = FALSE, staplewex = 1))
print(text(x=fivenum(boxplotResults), labels =fivenum(boxplotResults), y=1.25))
print(text(x = boxplot.stats(boxplotResults)$stats, labels = boxplot.stats(boxplotResults)$stats, y = 1.25))
print (title(paste("Steinfurter Straße", headName )))
}
boxplotResultsFunction(ResultTableT1T2WidthAmplitude$resultsT2MinusT1, "Width resultsT2MinusT1")
title("Heisenbergstrasse width results in milliseconds")
boxplotResultsFunction(ResultTableT1T2WidthAmplitude$resultsT2MinusT1, "Heisenbergstrasse width boxplot results in milliseconds")
boxplotResultsFunction<-function(boxplotResults, headName ){
print (boxplot(boxplotResults, horizontal = TRUE, axes = FALSE, staplewex = 1))
print(text(x=fivenum(boxplotResults), labels =fivenum(boxplotResults), y=1.25))
print(text(x = boxplot.stats(boxplotResults)$stats, labels = boxplot.stats(boxplotResults)$stats, y = 1.25))
print (title(paste("Heisenbergstrasse", headName )))
}
boxplotResultsFunction(ResultTableT1T2WidthAmplitude$resultsT2MinusT1, "Heisenbergstrasse width boxplot results in milliseconds")
boxplotResultsFunction(ResultTableT1T2WidthAmplitude$resultsT2MinusT1, "width boxplot results in milliseconds")
boxplotResultsFunction(ResultTableT1T2WidthAmplitude$resultsT2MinusT1, "boxplot width results in milliseconds")
#plot Car
print(ggplot(csvDataFromArduino, aes(x=timeInMilliseconds, y=signalStrength)) +
geom_line() +
geom_vline(xintercept = jsonCar, colour="yellowgreen", linetype = 4) +
geom_vline(xintercept = jsonBicycle, colour="black", linetype = 2) +
#  geom_vline(xintercept = jsonTruck, colour="green", linetype = 3) +
geom_vline(xintercept = startTimeT1, colour="red", linetype = 3) +
geom_vline(xintercept = endTimeT2, colour="blue", linetype = 3) +
coord_cartesian(xlim = c(182371, 183734)) +
labs(title="Heisenbergstrasse 4/7/2018 peak width:", subtitle = "horizontal lines: startTimeT1= red line; bicycle=black line; endTimeT2= blue line; ", x = "Time in milliseconds", y = "Strength in dB"))
